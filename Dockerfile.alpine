# Simple Alpine-only Dockerfile (now that @nuxt/content is removed)
# Minimal dependencies - no native compilation needed!

# Build stage
FROM node:20-alpine AS builder

# Set working directory (no additional packages needed for build!)
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy package files first
COPY package.json pnpm-lock.yaml ./

# Install dependencies (much simpler now!)
RUN pnpm install --frozen-lockfile

# Copy Prisma schema and generate client
COPY prisma ./prisma/
RUN npx prisma generate

# Copy application code
COPY . .

# Build the application (no more better-sqlite3 issues!)
RUN pnpm run build

# Production stage - minimal Alpine
FROM node:20-alpine AS production

# Install only runtime dependencies
RUN apk add --no-cache \
    sqlite \
    curl \
    dumb-init

# Set working directory
WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nuxtjs -u 1001

# Copy built application and runtime dependencies
COPY --from=builder /app/.output ./.output
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/package.json ./package.json

# For a Nuxt app, the .output contains everything needed at runtime
# Prisma client is embedded in the server bundle

# Create data directory with proper permissions
RUN mkdir -p /app/data && chown -R nuxtjs:nodejs /app

# Switch to non-root user
USER nuxtjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", ".output/server/index.mjs"]
