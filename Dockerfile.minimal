# Ultra-minimal Dockerfile optimized for size
# Uses distroless for maximum size reduction

# Build stage
FROM node:22-alpine AS builder

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy package files first for better caching
COPY package.json pnpm-lock.yaml ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy Prisma schema and generate client
COPY prisma ./prisma
RUN npx prisma generate

# Copy application code (filtered by .dockerignore)
COPY . .

# Build the application
RUN pnpm run build

# Production stage - ultra-minimal distroless
FROM gcr.io/distroless/nodejs22-debian12 AS production

# Set working directory
WORKDIR /app

# Copy only the essential built application
COPY --from=builder /app/.output ./.output

# Copy schema for reference (Prisma client is embedded in .output)
COPY --from=builder /app/prisma/schema.sql ./schema.sql

# Expose port
EXPOSE 3000

# Simple node-based health check (no curl dependency needed)
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', res => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"

# Start the application directly (distroless runs as non-root by default)
CMD ["./.output/server/index.mjs"]