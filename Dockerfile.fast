# Fast build Dockerfile for testing (Dockerfile.fast)
# Single stage build for testing - not optimized for size

FROM node:20-alpine

# Install necessary build tools
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    sqlite \
    curl \
    dumb-init

# Set working directory
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy package files first (for better Docker layer caching)
COPY package.json pnpm-lock.yaml ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# Rebuild native dependencies for Alpine Linux
RUN npm rebuild better-sqlite3 --build-from-source

# Copy Prisma schema and generate client
COPY prisma ./prisma/
RUN npx prisma generate

# Copy application code
COPY . .

# Build the application
RUN pnpm run build

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nuxtjs -u 1001

# Create data directory with proper permissions
RUN mkdir -p /app/data && chown -R nuxtjs:nodejs /app

# Switch to non-root user
USER nuxtjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", ".output/server/index.mjs"]
